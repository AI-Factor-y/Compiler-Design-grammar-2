
#pragma once

#include <stdio.h>
#include <stdlib.h>

#define MAX_LABELS 1000
// LABEL 999 is a special label denoting the function FUN

char compiled_file_path[]= "../xsm_expl/compiled.xsm";

void replace_labels(char file_path[]);
void create_label_array(char file_path[]);
void replace_labels_with_address(char file_path[]);
int set_label_no_with_addr(char line[],int instr_addr);
void add_label_ip(char line[],char new_line[],int label_ip);
void remove_label_tag(char line[],char new_line[]);
int get_label_no(char line[],int start);



FILE *inter_file; // file pointer for writing into compiled file

int LABEL_ADDR[MAX_LABELS];


/** MAIN DRIVER FUNCTION **/
/*========================*/

/* The function replaces the labels with the instruction addr */
void replace_labels_with_address(char file_path[]){

	create_label_array(file_path);

	replace_labels(file_path);
}




/** FILLING lABEL ARRAY WITH CORRESPONDING INSTR ADDR VALUES **/ 
/*============================================================*/


void create_label_array(char file_path[]){

	inter_file=fopen(file_path,"r");

	char line[256];

	int instr_addr=2048;

	while (fgets(line, sizeof(line), inter_file)) {
		/* note that fgets don't strip the terminating \n, checking its
		   presence would allow to handle lines longer that sizeof(line) */

		printf("%d | %s",instr_addr, line); 

		if(strncmp(line,"LABEL",5)==0){
			// int lb_no=get_label_no(line,5);
			// LABEL_ADDR[lb_no]=instr_addr;

			set_label_no_with_addr(line,instr_addr);
		}

		if(instr_addr < 2056){
			instr_addr++;
		}else{
			instr_addr+=2;
		}

	}

	fclose(inter_file);
}


/* set_label_no_with_addr SETS us all labels at a 
*  particular instruction adr and fills the index of label_arr with 
*  instruction addr
*  it returns the number of labels in that line
*/
int set_label_no_with_addr(char line[],int instr_addr){

	int i=0,flag=1;
	int num=0;
	char code[]="LABEL";

	int num_labels=0;

	while(flag){

		for(int j=0;j<5;j++){
			if(code[j]!=line[i]){
				flag=0;
				break;
			}
			i++;
		}

		if(!flag)break;

		num=0;

		while(line[i]!=':'){
			num=num*10 + (line[i]-'0');
			i++;
		}
		i++;
		LABEL_ADDR[num]= instr_addr;
		num_labels++;
	}

	return num;
}	



/* FUNCTION TO REPLACE THE lABELS BY INSTR ADDR BY LOOKING INTO LABEL_ARR */
/*========================================================================*/ 


void replace_labels(char file_path[]){
	inter_file=fopen(file_path,"r");

	FILE *compiled_file= fopen(compiled_file_path,"w");

	char line[256];

	int instr_addr=2048;

	while (fgets(line, sizeof(line), inter_file)) {
		/* note that fgets don't strip the terminating \n, checking its
		   presence would allow to handle lines longer that sizeof(line) */

		if(strncmp(line,"JMP_AT_LABEL",12)==0){

			int lb_id= get_label_no(line,12);

			int label_ip= LABEL_ADDR[lb_id];
			// get the instuction address corresponding to the
			// label id

			char new_line[256];
			// replace the label text with the label address
			add_label_ip(line,new_line,label_ip);

			fprintf(compiled_file,"%s", new_line); 

		
		}else if(strncmp(line,"LABEL",5)==0){
			// remove label text
			char new_line[256];
			// remove the label text from the string `line` 
			// if multiple labels are present , all label text will be removed
			remove_label_tag(line,new_line);
			fprintf(compiled_file,"%s", new_line); 
		
		}else{
			fprintf(compiled_file,"%s", line); 
		}

		
		if(instr_addr < 2056){
			instr_addr++;
		}else{
			instr_addr+=2;
		}

	}

	fclose(inter_file);
	fclose(compiled_file);

}




int get_label_no(char line[],int start){

	int i=start;
	int num=0;
	while(line[i]!=':'){
		num=num*10 + (line[i]-'0');
		i++;
	}
	return num;
}	



// this function removes the LABEL text in the intermediate code
// the new line string generated by removing the "label" text is stored
// in the variable new_line;

void remove_label_tag(char line[],char new_line[]){

	int last_colon=0;

	for(int i=0;line[i]!='\n';i++){
		if(line[i]==':'){
			last_colon=i;
		}
	}

	int i=0;
	for(int j=last_colon+1;line[j]!='\n';j++){
		
		new_line[i]=line[j];
		i++;

	}
	new_line[i]='\n';
	i++;
	new_line[i]='\0';

}

void add_label_ip(char line[],char new_line[],int label_ip){

	int i=0,j=0,flag=0;
	for(int j=0;line[j]!='\n';j++){
		
		if(flag){
			new_line[i]=line[j];
			i++;
		}	

		if(line[j]==':'){
			flag=1;
		}
	}

	char str[10];
	int k=0; int num=label_ip;

	while(num){
		int dig=num%10;
		num=num/10;
		str[k]=(dig+'0'); k++;
	}

	for(int j=k-1;j>=0;j--){
		new_line[i]=str[j];
		i++;
	}

	new_line[i]='\n';
	i++;
	new_line[i]='\0';

}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~